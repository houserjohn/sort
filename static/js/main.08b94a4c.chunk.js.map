{"version":3,"sources":["SortingAlgorithms/QuickSort.tsx","SortingAlgorithms/HeapSort.tsx","SortingAlgorithms/MergeSort.tsx","reportWebVitals.ts","Components/Bar.tsx","Components/Visualizer.tsx","store.tsx","SharedFunctions.tsx","SortingAlgorithms/InsertionSort.tsx","SortingAlgorithms/BubbleSort.tsx","SortingAlgorithms/SelectionSort.tsx","SortingAlgorithms/RadixSort.tsx","Components/Toolbar.tsx","Sort.tsx","App.tsx","index.tsx"],"names":["default_colors","global_array","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","BAR","styled","div","props","color","value","width","Bar","array","useSelector","state","length","VISUALIZER","Visualizer","colors","map","index","store","createStore","action","type","payload","sorting_algorithm","speed","active","composeWithDevTools","swap","i","j","temp","animate_color_and_array","copied_default_colors","copied_array","a","dispatch","speed_time","getState","Promise","r","setTimeout","animate_color_and_array_finished","insertion_sort","slice","fill","bubble_sort","did_swap","selection_sort","min","quick_sort","quickSortHelper","strt","end","pivot","lft","rght","heap_sort","buildHeap","divide","siftdown","left","bggr","right","Math","floor","radix_sort","mxDigits","countDigits","max","sorted","Array","digit","counts","v","getDigit","num","place","digits","merge_sort","auxiliary","mergeSortHelper","main","start","middle","doMerge","k","create_new_array","size","push","random","start_sorting","onClickStop","e","preventDefault","TOOLBAR","DESCRIPTOR","p","BUTTON","button","SPEED_BAR","input","Toolbar","disabled","onClick","onClickRandomize","defaultValue","onMouseUp","target","update_array_length","onChange","console","log","update_sorting_algorithm","step","adjusted_speed","onSpeedAdjust","onClickGo","GlobalStyle","createGlobalStyle","Sort","Fragment","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.08b94a4c.chunk.js","sourcesContent":["// Worst O(n^2) T       | O(log n) S\r\n// Average O(n log n) T | O(log n) S\r\n// Best O(n log n) T    | O(log n) S\r\n// n is length of input array\r\n\r\nimport store from \"../store\";\r\n\r\nimport {\r\n  swap,\r\n  animate_color_and_array,\r\n  animate_color_and_array_finished,\r\n} from \"../SharedFunctions\";\r\n\r\nlet default_colors: string[];\r\n\r\nconst quick_sort = async (array: number[]) => {\r\n  default_colors = store.getState().colors.slice().fill(\"blue\");\r\n\r\n  await quickSortHelper(array, 0, array.length - 1);\r\n\r\n  // stop the animation from finishing if stop was pressed\r\n  let active: boolean = store.getState().active;\r\n  if (!active) return;\r\n  /* animation finished start */\r\n  animate_color_and_array_finished(default_colors.slice(), array.slice());\r\n  /* animation finished end */\r\n\r\n  return array;\r\n};\r\n\r\nconst quickSortHelper = async (array: number[], strt: number, end: number) => {\r\n  if (strt >= end) return;\r\n  let pivot = strt;\r\n  let lft = strt + 1;\r\n  let rght = end;\r\n  while (lft <= rght) {\r\n    /* animation of the bars start */\r\n    await animate_color_and_array(\r\n      default_colors.slice(),\r\n      array.slice(),\r\n      lft,\r\n      rght\r\n    );\r\n    /* animation of the bars end */\r\n    let active: boolean = store.getState().active;\r\n    if (!active) return;\r\n    if (array[lft] > array[pivot] && array[rght] < array[pivot]) {\r\n      swap(array, lft, rght);\r\n      // only display animation if the bars were actually swapped\r\n      /* animation of the bars start */\r\n      await animate_color_and_array(\r\n        default_colors.slice(),\r\n        array.slice(),\r\n        lft,\r\n        rght\r\n      );\r\n      /* animation of the bars end */\r\n      let active: boolean = store.getState().active;\r\n      if (!active) return;\r\n    }\r\n    if (array[lft] <= array[pivot]) lft += 1;\r\n    if (array[rght] >= array[pivot]) rght -= 1;\r\n  }\r\n  /* animation of the bars start */\r\n  await animate_color_and_array(\r\n    default_colors.slice(),\r\n    array.slice(),\r\n    pivot,\r\n    rght\r\n  );\r\n  /* animation of the bars end */\r\n  let active: boolean = store.getState().active;\r\n  if (!active) return;\r\n  swap(array, pivot, rght);\r\n  /* animation of the bars start */\r\n  await animate_color_and_array(\r\n    default_colors.slice(),\r\n    array.slice(),\r\n    pivot,\r\n    rght\r\n  );\r\n  /* animation of the bars end */\r\n  active = store.getState().active;\r\n  if (!active) return;\r\n  let lft_len = rght - strt;\r\n  let rght_len = end - rght;\r\n  if (lft_len > rght_len) {\r\n    await quickSortHelper(array, rght + 1, end);\r\n    await quickSortHelper(array, strt, rght - 1);\r\n  } else {\r\n    await quickSortHelper(array, strt, rght - 1);\r\n    await quickSortHelper(array, rght + 1, end);\r\n  }\r\n};\r\n\r\nexport default quick_sort;\r\n","// All cases: O(n log n) T | O(1) S\r\n\r\nimport store from \"../store\";\r\n\r\nimport {\r\n  swap,\r\n  animate_color_and_array,\r\n  animate_color_and_array_finished,\r\n} from \"../SharedFunctions\";\r\n\r\nlet default_colors: string[];\r\n\r\n// O(nlogn) T | O(1) S\r\nconst heap_sort = async (array: number[]) => {\r\n  default_colors = store.getState().colors.slice().fill(\"blue\");\r\n\r\n  await buildHeap(array);\r\n\r\n  for (let divide = array.length - 1; divide >= 1; divide--) {\r\n    /* animation of the bars start */\r\n    await animate_color_and_array(\r\n      default_colors.slice(),\r\n      array.slice(),\r\n      0,\r\n      divide\r\n    );\r\n    /* animation of the bars end */\r\n    let active: boolean = store.getState().active;\r\n    if (!active) return;\r\n    swap(array, 0, divide);\r\n    /* animation of the bars start */\r\n    await animate_color_and_array(\r\n      default_colors.slice(),\r\n      array.slice(),\r\n      0,\r\n      divide\r\n    );\r\n    active = store.getState().active;\r\n    if (!active) return;\r\n    /* animation of the bars end */\r\n\r\n    await siftdown(array, divide, 0);\r\n  }\r\n  /* animation finished start */\r\n  animate_color_and_array_finished(default_colors.slice(), array.slice());\r\n  /* animation finished end */\r\n\r\n  return array;\r\n};\r\n\r\n// O(logn) T | O(1) S\r\nconst siftdown = async (array: number[], length: number, index: number) => {\r\n  let left = 2 * index + 1;\r\n  let right = 2 * index + 2;\r\n  let bggr = right >= length || array[left] >= array[right] ? left : right;\r\n  while (left < length && array[index] < array[bggr]) {\r\n    /* animation of the bars start */\r\n    await animate_color_and_array(\r\n      default_colors.slice(),\r\n      array.slice(),\r\n      index,\r\n      bggr\r\n    );\r\n    /* animation of the bars end */\r\n    let active: boolean = store.getState().active;\r\n    if (!active) return;\r\n    swap(array, index, bggr);\r\n    /* animation of the bars start */\r\n    await animate_color_and_array(\r\n      default_colors.slice(),\r\n      array.slice(),\r\n      index,\r\n      bggr\r\n    );\r\n    /* animation of the bars end */\r\n    active = store.getState().active;\r\n    if (!active) return;\r\n\r\n    index = bggr;\r\n    left = 2 * index + 1;\r\n    right = 2 * index + 2;\r\n    bggr = right >= length || array[left] >= array[right] ? left : right;\r\n  }\r\n};\r\n\r\n// O(n) T | O(1) S\r\nconst buildHeap = async (array: number[]) => {\r\n  let index = Math.floor((array.length - 2) / 2);\r\n  for (; index >= 0; index--) await siftdown(array, array.length, index);\r\n};\r\n\r\nexport default heap_sort;\r\n","// All cases: O(n log n) T | O(n) S\r\n\r\nimport store from \"../store\";\r\nimport {\r\n  animate_color_and_array,\r\n  animate_color_and_array_finished,\r\n} from \"../SharedFunctions\";\r\n\r\nlet default_colors: string[];\r\nlet global_array: number[];\r\n\r\nconst merge_sort = async (array: number[]) => {\r\n  if (array.length === 0) return array;\r\n\r\n  default_colors = store.getState().colors.slice().fill(\"blue\");\r\n  global_array = array.slice(0);\r\n\r\n  let auxiliary: number[] = array.slice();\r\n  await mergeSortHelper(array, 0, array.length - 1, auxiliary);\r\n\r\n  // stop the animation from finishing if stop was pressed\r\n  let active: boolean = store.getState().active;\r\n  if (!active) return;\r\n\r\n  /* animation finished start */\r\n  animate_color_and_array_finished(default_colors.slice(), array.slice());\r\n  /* animation finished end */\r\n  return array;\r\n};\r\n\r\nconst mergeSortHelper = async (\r\n  main: number[],\r\n  start: number,\r\n  end: number,\r\n  auxiliary: number[]\r\n) => {\r\n  if (start === end) return;\r\n  let middle = Math.floor((start + end) / 2);\r\n  await mergeSortHelper(auxiliary, start, middle, main);\r\n  let active: boolean = store.getState().active;\r\n  if (!active) return;\r\n  await mergeSortHelper(auxiliary, middle + 1, end, main);\r\n  active = store.getState().active;\r\n  if (!active) return;\r\n  await doMerge(main, start, middle, end, auxiliary);\r\n  active = store.getState().active;\r\n  if (!active) return;\r\n};\r\n\r\nconst doMerge = async (\r\n  main: number[],\r\n  start: number,\r\n  middle: number,\r\n  end: number,\r\n  auxiliary: number[]\r\n) => {\r\n  let [k, i] = [start, start];\r\n  let j = middle + 1;\r\n  for (; i <= middle && j <= end; k++) {\r\n    if (auxiliary[i] <= auxiliary[j]) {\r\n      /* animation of the bars start */\r\n      await animate_color_and_array(\r\n        default_colors.slice(),\r\n        global_array.slice(),\r\n        i,\r\n        j\r\n      );\r\n      /* animation of the bars end */\r\n      let active: boolean = store.getState().active;\r\n      if (!active) return;\r\n      global_array[k] = auxiliary[i];\r\n      main[k] = auxiliary[i++];\r\n      /* animation of the bars start */\r\n      await animate_color_and_array(\r\n        default_colors.slice(),\r\n        global_array.slice(),\r\n        i - 1,\r\n        j\r\n      );\r\n      /* animation of the bars end */\r\n      active = store.getState().active;\r\n      if (!active) return;\r\n    } else {\r\n      /* animation of the bars start */\r\n      await animate_color_and_array(\r\n        default_colors.slice(),\r\n        global_array.slice(),\r\n        i,\r\n        j\r\n      );\r\n      /* animation of the bars end */\r\n      let active: boolean = store.getState().active;\r\n      if (!active) return;\r\n\r\n      global_array[k] = auxiliary[j];\r\n      main[k] = auxiliary[j++];\r\n      /* animation of the bars start */\r\n      await animate_color_and_array(\r\n        default_colors.slice(),\r\n        global_array.slice(),\r\n        i,\r\n        j - 1\r\n      );\r\n      /* animation of the bars end */\r\n      active = store.getState().active;\r\n      if (!active) return;\r\n    }\r\n  }\r\n  for (; i <= middle; i++, k++) {\r\n    /* animation of the bars start */\r\n    await animate_color_and_array(\r\n      default_colors.slice(),\r\n      global_array.slice(),\r\n      i,\r\n      j\r\n    );\r\n    /* animation of the bars end */\r\n    let active: boolean = store.getState().active;\r\n    if (!active) return;\r\n\r\n    global_array[k] = auxiliary[i];\r\n    main[k] = auxiliary[i];\r\n    /* animation of the bars start */\r\n    await animate_color_and_array(\r\n      default_colors.slice(),\r\n      global_array.slice(),\r\n      i,\r\n      j\r\n    );\r\n    /* animation of the bars end */\r\n    active = store.getState().active;\r\n    if (!active) return;\r\n  }\r\n  for (; j <= end; j++, k++) {\r\n    /* animation of the bars start */\r\n    await animate_color_and_array(\r\n      default_colors.slice(),\r\n      global_array.slice(),\r\n      i,\r\n      j\r\n    );\r\n    /* animation of the bars end */\r\n    let active: boolean = store.getState().active;\r\n    if (!active) return;\r\n\r\n    global_array[k] = auxiliary[j];\r\n    main[k] = auxiliary[j];\r\n    /* animation of the bars start */\r\n    await animate_color_and_array(\r\n      default_colors.slice(),\r\n      global_array.slice(),\r\n      i,\r\n      j\r\n    );\r\n    /* animation of the bars end */\r\n    active = store.getState().active;\r\n    if (!active) return;\r\n  }\r\n};\r\n\r\nexport default merge_sort;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\n//import store from \"../store\";\r\n\r\ninterface BAR_Props {\r\n  value: number;\r\n  width: number;\r\n  color: string;\r\n}\r\n\r\nconst BAR = styled.div<BAR_Props>`\r\n  margin: 0px;\r\n  border: 0px solid white;\r\n  padding: 0px;\r\n  outline-style: none;\r\n  background-color: ${(props) => props.color};\r\n  height: ${(props) => props.value}px;\r\n  width: ${(props) => props.width}%;\r\n  display: inline-block;\r\n`;\r\n\r\ninterface bar_props {\r\n  value: number;\r\n  color: string;\r\n}\r\n\r\ninterface REDUX_STORE {\r\n  array: number[];\r\n}\r\n// eventually add inner bar to the bar so that there is padding between bars\r\nconst Bar = (props: bar_props) => {\r\n  const array: number[] = useSelector((state: REDUX_STORE) => state.array);\r\n  return <BAR value={props.value} width={(1 / array.length) * 100} color={props.color} />;\r\n  \r\n};\r\n\r\nexport default Bar;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport Bar from \"./Bar\";\r\n//import store from \"../store\";\r\n\r\nconst VISUALIZER = styled.div`\r\n  background-color: gray;\r\n  margin: auto;\r\n  height: 100%;\r\n  width: 90%;\r\n  text-align: center;\r\n  padding: 20px 0px 0px 0px;\r\n`;\r\n\r\ninterface Visualizer_Props {}\r\n\r\ninterface REDUX_STORE {\r\n  array: number[];\r\n  colors: string[];\r\n}\r\n\r\nconst Visualizer = (props: Visualizer_Props) => {\r\n  const array: number[] = useSelector((state: REDUX_STORE) => state.array);\r\n  const colors: string[] = useSelector((state: REDUX_STORE) => state.colors);\r\n  return (\r\n    <VISUALIZER>\r\n      {array.map((value: number, index: number) => (\r\n        <Bar key={index} value={value} color={colors[index]} />\r\n      ))}\r\n    </VISUALIZER>\r\n  );\r\n};\r\n\r\nexport default Visualizer;\r\n","import { createStore } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nconst reducer = (\r\n  state: {\r\n    array: number[];\r\n    sorting_algorithm: string;\r\n    colors: string[];\r\n    speed: number;\r\n    active: boolean; // whether or not an algorithm is running\r\n  },\r\n  action: { type: string; payload: string | any }\r\n) => {\r\n  // The reducer normally looks at the action type field to decide what happens\r\n  switch (action.type) {\r\n    // Do something here based on the different types of actions\r\n    case \"sort/set_array\": {\r\n      // sets the array and colors of each bar\r\n      return {\r\n        ...state,\r\n        array: action.payload.array,\r\n        colors: action.payload.colors,\r\n      };\r\n    }\r\n\r\n    case \"sort/update_array\": {\r\n      // updates the array (the array is still the same size but values changed)\r\n      return {\r\n        ...state,\r\n        array: action.payload,\r\n      };\r\n    }\r\n\r\n    case \"sort/set_sorting_algorithm\": {\r\n      return {\r\n        ...state,\r\n        sorting_algorithm: action.payload,\r\n      };\r\n    }\r\n\r\n    case \"sort/set_colors\": {\r\n      return {\r\n        ...state,\r\n        colors: action.payload,\r\n      };\r\n    }\r\n\r\n    case \"sort/set_speed\": {\r\n      return {\r\n        ...state,\r\n        speed: action.payload,\r\n      };\r\n    }\r\n\r\n    case \"sort/set_activity\": {\r\n      return {\r\n        ...state,\r\n        active: action.payload,\r\n      };\r\n    }\r\n\r\n    default:\r\n      // If this reducer doesn't recognize the action type, or doesn't\r\n      // care about this specific action, return the existing state unchanged\r\n      return state;\r\n  }\r\n};\r\n\r\nconst store = createStore(\r\n  reducer as any,\r\n  {\r\n    array: [20, 30, 22, 10, 100, 20, 40, 50, 60],\r\n    sorting_algorithm: \"insertion_sort\",\r\n    colors: [\r\n      \"blue\",\r\n      \"blue\",\r\n      \"blue\",\r\n      \"blue\",\r\n      \"blue\",\r\n      \"blue\",\r\n      \"blue\",\r\n      \"blue\",\r\n      \"blue\",\r\n    ],\r\n    speed: 1000,\r\n    active: false,\r\n  },\r\n  composeWithDevTools()\r\n);\r\n\r\nexport default store;\r\n","// A collection of commonly used functions that can be reused across modules\r\nimport store from \"./store\";\r\n\r\nconst swap = (array: number[], i: number, j: number) => {\r\n  let temp: number = array[i];\r\n  array[i] = array[j];\r\n  array[j] = temp;\r\n};\r\n\r\nconst animate_color_and_array = async (\r\n  copied_default_colors: string[],\r\n  copied_array: number[],\r\n  i: number,\r\n  j: number\r\n) => {\r\n  copied_default_colors[i] = \"green\";\r\n  copied_default_colors[j] = \"green\";\r\n  store.dispatch({\r\n    type: \"sort/set_array\",\r\n    payload: { array: copied_array, colors: copied_default_colors },\r\n  });\r\n  let speed_time = store.getState().speed;\r\n  await new Promise((r) => setTimeout(r, speed_time));\r\n};\r\n\r\nconst animate_color_and_array_finished = async (\r\n  copied_default_colors: string[],\r\n  copied_array: number[]\r\n) => {\r\n  for (let i = 0; i < copied_default_colors.length; i++) {\r\n    copied_default_colors[i] = \"green\";\r\n  }\r\n  store.dispatch({\r\n    type: \"sort/set_array\",\r\n    payload: { array: copied_array, colors: copied_default_colors },\r\n  });\r\n};\r\n\r\nexport { swap, animate_color_and_array, animate_color_and_array_finished };\r\n","// Best case: O(n) T | O(1) S\r\n// Avg and worst cases: O(n^2) T | O(1) S\r\n\r\nimport store from \"../store\";\r\n\r\nimport {\r\n  swap,\r\n  animate_color_and_array,\r\n  animate_color_and_array_finished,\r\n} from \"../SharedFunctions\";\r\n\r\n// put in project something about using asynchronous calls/synchronize\r\nconst insertion_sort = async (array: number[]) => {\r\n  let default_colors: string[] = store.getState().colors.slice().fill(\"blue\");\r\n  for (let i = 0; i < array.length - 1; i++) {\r\n    for (let j = i + 1; j > 0; j--) {\r\n      /* animation of the bars start */\r\n      await animate_color_and_array(\r\n        default_colors.slice(),\r\n        array.slice(),\r\n        j - 1,\r\n        j\r\n      );\r\n      /* animation of the bars end */\r\n      let active: boolean = store.getState().active;\r\n      if (!active) return;\r\n\r\n      if (array[j - 1] > array[j]) {\r\n        swap(array, j - 1, j);\r\n\r\n        // only animate the swap if the first bar is bigger than the second (a swap occurred)\r\n        /* animation of the bars start */\r\n        await animate_color_and_array(\r\n          default_colors.slice(),\r\n          array.slice(),\r\n          j - 1,\r\n          j\r\n        );\r\n        /* animation of the bars end */\r\n        active = store.getState().active;\r\n        if (!active) return;\r\n      }\r\n    }\r\n  }\r\n\r\n  /* animation finished start */\r\n  animate_color_and_array_finished(default_colors.slice(), array.slice());\r\n  /* animation finished end */\r\n\r\n  return array;\r\n};\r\n\r\nexport default insertion_sort;\r\n","// Best: O(n) Time | O(1) Space\r\n// Avg: O(n^2) Time | O(1) Space\r\n// Worst: O(n^2) Time | O(1) Space\r\n\r\nimport store from \"../store\";\r\nimport {\r\n  swap,\r\n  animate_color_and_array,\r\n  animate_color_and_array_finished,\r\n} from \"../SharedFunctions\";\r\n\r\nconst bubble_sort = async (array: number[]) => {\r\n  let default_colors: string[] = store.getState().colors.slice().fill(\"blue\");\r\n\r\n  for (let i: number = 0; i < array.length; i++) {\r\n    let did_swap: boolean = false;\r\n    for (let j: number = 1; j < array.length - i; j++) {\r\n      /* animation of the bars start */\r\n      await animate_color_and_array(\r\n        default_colors.slice(),\r\n        array.slice(),\r\n        j - 1,\r\n        j\r\n      );\r\n      /* animation of the bars end */\r\n      let active: boolean = store.getState().active;\r\n      if (!active) return;\r\n\r\n      if (array[j - 1] > array[j]) {\r\n        swap(array, j - 1, j);\r\n        did_swap = true;\r\n\r\n        // Only do the animation of the bars switching if the first is bigger than second\r\n        /* animation of the bars start */\r\n        await animate_color_and_array(\r\n          default_colors.slice(),\r\n          array.slice(),\r\n          j - 1,\r\n          j\r\n        );\r\n        /* animation of the bars end */\r\n        let active: boolean = store.getState().active;\r\n        if (!active) return;\r\n      }\r\n    }\r\n    if (!did_swap) break;\r\n  }\r\n\r\n  /* animation finished start */\r\n  animate_color_and_array_finished(default_colors.slice(), array.slice());\r\n  /* animation finished end */\r\n\r\n  return array;\r\n};\r\n\r\nexport default bubble_sort;\r\n","// All cases: O(n^2) T | O(1) S\r\nimport store from \"../store\";\r\n\r\nimport {\r\n  swap,\r\n  animate_color_and_array,\r\n  animate_color_and_array_finished,\r\n} from \"../SharedFunctions\";\r\n\r\nconst selection_sort = async (array: number[]) => {\r\n  let default_colors: string[] = store.getState().colors.slice().fill(\"blue\");\r\n\r\n  for (let i = 0; i < array.length - 1; i++) {\r\n    let min: number = i;\r\n    for (let j = i + 1; j < array.length; j++) {\r\n      /* animation of the bars start */\r\n      await animate_color_and_array(\r\n        default_colors.slice(),\r\n        array.slice(),\r\n        min,\r\n        j\r\n      );\r\n      /* animation of the bars end */\r\n      let active: boolean = store.getState().active;\r\n      if (!active) return;\r\n\r\n      if (array[min] > array[j]) {\r\n        min = j;\r\n\r\n        // only do animation of swap if swap occured\r\n        /* animation of the bars start */\r\n        await animate_color_and_array(\r\n          default_colors.slice(),\r\n          array.slice(),\r\n          min,\r\n          j\r\n        );\r\n        /* animation of the bars end */\r\n        active = store.getState().active;\r\n        if (!active) return;\r\n      }\r\n    }\r\n    /* animation of the bars start */\r\n    await animate_color_and_array(\r\n      default_colors.slice(),\r\n      array.slice(),\r\n      min,\r\n      i\r\n    );\r\n    let active: boolean = store.getState().active;\r\n    if (!active) return;\r\n    /* animation of the bars end */\r\n    swap(array, min, i);\r\n    /* animation of the bars start */\r\n    await animate_color_and_array(\r\n      default_colors.slice(),\r\n      array.slice(),\r\n      min,\r\n      i\r\n    );\r\n    active = store.getState().active;\r\n    if (!active) return;\r\n    /* animation of the bars end */\r\n  }\r\n\r\n  /* animation finished start */\r\n  animate_color_and_array_finished(default_colors.slice(), array.slice());\r\n  /* animation finished end */\r\n\r\n  return array;\r\n};\r\n\r\nexport default selection_sort;\r\n","// For base 10: O(d*n) Time | O(n) Space\r\n// For general base: O(d*(n+b)) Time | O(n + b) Space\r\n// d is the max number of digits\r\n// n is the size of the array\r\n// b is the base of the number system\r\n\r\nimport store from \"../store\";\r\n\r\nimport {\r\n  animate_color_and_array,\r\n  animate_color_and_array_finished,\r\n} from \"../SharedFunctions\";\r\n\r\nconst radix_sort = async (array: number[]) => {\r\n  let default_colors: string[] = store.getState().colors.slice().fill(\"blue\");\r\n\r\n  if (array.length === 0) return array;\r\n  let mxDigits = countDigits(Math.max(...array));\r\n  let sorted = new Array(array.length).fill(0);\r\n  for (let digit = 1; digit <= mxDigits; digit++) {\r\n    let counts = new Array(10).fill(0);\r\n    for (const v of array) counts[getDigit(v, digit)] += 1;\r\n    for (let i = 1; i < counts.length; i++) counts[i] += counts[i - 1];\r\n    for (let index = array.length - 1; index >= 0; index--) {\r\n      let v = array[index];\r\n      let i = getDigit(v, digit);\r\n      counts[i] -= 1;\r\n      sorted[counts[i]] = v;\r\n    }\r\n    for (let i = 0; i < array.length; i++) {\r\n      /* animation of the bars start */\r\n      await animate_color_and_array(\r\n        default_colors.slice(),\r\n        array.slice(),\r\n        i,\r\n        i\r\n      );\r\n      /* animation of the bars end */\r\n      let active: boolean = store.getState().active;\r\n      if (!active) return;\r\n      array[i] = sorted[i];\r\n      /* animation of the bars start */\r\n      await animate_color_and_array(\r\n        default_colors.slice(),\r\n        array.slice(),\r\n        i,\r\n        i\r\n      );\r\n      /* animation of the bars end */\r\n      active = store.getState().active;\r\n      if (!active) return;\r\n    }\r\n  }\r\n\r\n  /* animation finished start */\r\n  animate_color_and_array_finished(default_colors.slice(), array.slice());\r\n  /* animation finished end */\r\n\r\n  return array;\r\n};\r\n\r\n// O(1) Time | O(1) Space\r\nconst getDigit = (num: number, place: number) =>\r\n  Math.floor(num / 10 ** (place - 1)) % 10;\r\n\r\n// O(d) Time | O(1) Space\r\n// d is the number of digits in number\r\nconst countDigits = (num: number) => {\r\n  let digits = 1;\r\n  while (Math.floor(num / 10 ** digits) !== 0) digits += 1;\r\n  return digits;\r\n};\r\n\r\nexport default radix_sort;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport store from \"../store\";\r\n\r\nimport insertion_sort from \"../SortingAlgorithms/InsertionSort\";\r\nimport bubble_sort from \"../SortingAlgorithms/BubbleSort\";\r\nimport selection_sort from \"../SortingAlgorithms/SelectionSort\";\r\nimport quick_sort from \"../SortingAlgorithms/QuickSort\";\r\nimport heap_sort from \"../SortingAlgorithms/HeapSort\";\r\nimport radix_sort from \"../SortingAlgorithms/RadixSort\";\r\nimport merge_sort from \"../SortingAlgorithms/MergeSort\";\r\n\r\n// Gets random interval in range [min, max)\r\n// From https://stackoverflow.com/questions/1527803/generating-random-whole-numbers-in-javascript-in-a-specific-range\r\nconst getRandomArbitrary = (min: number, max: number) => {\r\n  return Math.floor(Math.random() * (max - min) + min);\r\n};\r\n\r\nconst create_new_array = (size: number) => {\r\n  let array: number[] = [];\r\n  for (let i = 0; i < size; i++) {\r\n    array.push(getRandomArbitrary(5, 200));\r\n  }\r\n\r\n  let colors: string[] = [];\r\n  for (let i = 0; i < size; i++) {\r\n    colors.push(\"blue\");\r\n  }\r\n\r\n  store.dispatch({\r\n    type: \"sort/set_array\",\r\n    payload: { array: array, colors: colors },\r\n  });\r\n};\r\n\r\nconst update_array_length = (e: any) => {\r\n  //console.log(e.target.value);\r\n  create_new_array(e.target.value);\r\n};\r\n\r\nconst update_sorting_algorithm = (e: any) => {\r\n  console.log(e.target.value);\r\n  store.dispatch({\r\n    type: \"sort/set_sorting_algorithm\",\r\n    payload: e.target.value,\r\n  });\r\n};\r\n\r\nconst start_sorting = async () => {\r\n  let array: number[] = store.getState().array.slice();\r\n  let active: boolean = store.getState().active;\r\n\r\n  store.dispatch({\r\n    type: \"sort/set_activity\",\r\n    payload: true,\r\n  });\r\n\r\n  let sorting_algorithm: string = store.getState().sorting_algorithm;\r\n  switch (sorting_algorithm) {\r\n    case \"insertion_sort\":\r\n      await insertion_sort(array);\r\n      break;\r\n    case \"bubble_sort\":\r\n      await bubble_sort(array);\r\n      break;\r\n    case \"selection_sort\":\r\n      await selection_sort(array);\r\n      break;\r\n    case \"quick_sort\":\r\n      await quick_sort(array);\r\n      break;\r\n    case \"heap_sort\":\r\n      await heap_sort(array);\r\n      break;\r\n    case \"radix_sort\":\r\n      await radix_sort(array);\r\n      break;\r\n    case \"merge_sort\":\r\n      await merge_sort(array);\r\n      break;\r\n  }\r\n  store.dispatch({\r\n    type: \"sort/set_activity\",\r\n    payload: false,\r\n  });\r\n};\r\n\r\nconst stop_sorting = () => {\r\n  let active: boolean = store.getState().active;\r\n\r\n  store.dispatch({\r\n    type: \"sort/set_activity\",\r\n    payload: false,\r\n  });\r\n};\r\n\r\n// Handles the Randomize button being clicked\r\nconst onClickRandomize = (e: any, length: number) => {\r\n  e.preventDefault();\r\n\r\n  create_new_array(length);\r\n};\r\n\r\n// Handles the Go button being clicked\r\nconst onClickGo = (e: any) => {\r\n  e.preventDefault();\r\n\r\n  start_sorting();\r\n};\r\n\r\nconst onClickStop = (e: any) => {\r\n  e.preventDefault();\r\n\r\n  stop_sorting();\r\n};\r\n\r\n// Handles the speed range being adjusted\r\nconst onSpeedAdjust = (e: any) => {\r\n  e.preventDefault();\r\n\r\n  let adjusted_speed: number = 2000 - e.target.value; // update it so that the max value is stored in the store\r\n\r\n  store.dispatch({\r\n    type: \"sort/set_speed\",\r\n    payload: adjusted_speed,\r\n  });\r\n  console.log(adjusted_speed);\r\n};\r\n\r\ninterface REDUX_STORE {\r\n  array: number[];\r\n  active: boolean;\r\n}\r\n\r\nconst TOOLBAR = styled.div`\r\n  background-color: gray;\r\n  text-align: center;\r\n`;\r\n\r\nconst DESCRIPTOR = styled.p`\r\n  display: inline-block;\r\n  margin: 0px;\r\n  padding: 0px;\r\n`;\r\n\r\ninterface BUTTON_Props {\r\n  disabled: boolean;\r\n}\r\nconst BUTTON = styled.button<BUTTON_Props>``;\r\n\r\n//direction: rtl;dd\r\nconst SPEED_BAR = styled.input``;\r\n//<input type=\"range\" min=\"10\" max=\"2000\" step=\"1\" onMouseUp={(e: any) => onSpeedAdjust(e)} />\r\n\r\nconst Toolbar = () => {\r\n  const active: boolean = useSelector((state: REDUX_STORE) => state.active);\r\n  const array: number[] = useSelector((state: REDUX_STORE) => state.array);\r\n\r\n  return (\r\n    <TOOLBAR>\r\n      <BUTTON\r\n        disabled={active}\r\n        onClick={(e: any) => onClickRandomize(e, array.length)}\r\n      >\r\n        Randomize\r\n      </BUTTON>\r\n      <DESCRIPTOR>Few</DESCRIPTOR>\r\n      <input\r\n        type=\"range\"\r\n        disabled={active}\r\n        defaultValue={array.length}\r\n        onMouseUp={(e: any) => update_array_length(e)}\r\n      />\r\n      <DESCRIPTOR>Many</DESCRIPTOR>\r\n      <select\r\n        disabled={active}\r\n        defaultValue=\"insertion sort\"\r\n        onChange={(e: any) => update_sorting_algorithm(e)}\r\n      >\r\n        <option value=\"insertion_sort\">Insertion Sort</option>\r\n        <option value=\"bubble_sort\">Bubble Sort</option>\r\n        <option value=\"selection_sort\">Selection Sort</option>\r\n        <option value=\"quick_sort\">Quick Sort</option>\r\n        <option value=\"heap_sort\">Heap Sort</option>\r\n        <option value=\"radix_sort\">Radix Sort</option>\r\n        <option value=\"merge_sort\">Merge Sort</option>\r\n      </select>\r\n      <DESCRIPTOR>Slow</DESCRIPTOR>\r\n      <SPEED_BAR\r\n        type=\"range\"\r\n        min=\"10\"\r\n        max=\"2000\"\r\n        step=\"1\"\r\n        defaultValue={store.getState().speed}\r\n        onMouseUp={(e: any) => onSpeedAdjust(e)}\r\n      />\r\n      <DESCRIPTOR>Fast</DESCRIPTOR>\r\n      <BUTTON disabled={!active} onClick={(e: any) => onClickStop(e)}>\r\n        Stop\r\n      </BUTTON>\r\n      <BUTTON disabled={active} onClick={(e: any) => onClickGo(e)}>\r\n        Go\r\n      </BUTTON>\r\n    </TOOLBAR>\r\n  );\r\n};\r\n\r\nexport default Toolbar;\r\n","import React from \"react\";\r\n\r\nimport Visualizer from \"./Components/Visualizer\";\r\nimport Toolbar from \"./Components/Toolbar\";\r\n//import store from \"./store\";\r\n\r\nimport { createGlobalStyle } from \"styled-components\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body {\r\n    margin: 0px\r\n}\r\n`;\r\n\r\nconst Sort = () => {\r\n  return (\r\n    <div>\r\n      <React.Fragment>\r\n        <GlobalStyle />\r\n      </React.Fragment>\r\n      <Toolbar />\r\n      <Visualizer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sort;\r\n","import React from 'react';\nimport Sort from './Sort';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Sort/> \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from \"react-redux\";\n\nimport App from './App';\nimport store from \"./store\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}